{
  "version": 3,
  "sources": ["../src/emend.js"],
  "sourcesContent": ["/**\n * @module emend\n * @version 1.1.0\n * @license MIT\n * @author Ris Adams <emend@risadams.com>\n * @description A lightweight JavaScript library for protecting mailto anchor links from web scrapers.\n * @copyright Copyright \u00A9 2021-2025 Ris Adams. All rights reserved.\n * \n * Emend provides email address protection by encoding mailto links to prevent harvesting by spambots.\n * It works by obfuscating email addresses in mailto: links, making them unreadable to automated scrapers\n * while maintaining functionality for human users.\n * \n * Features:\n * - Encode and protect standard mailto: links\n * - Support for explicitly marked mailto: links with custom prefix\n * - Configurable behavior through options\n * - No dependencies, pure vanilla JavaScript\n */\n\n/**\n * Creates a new encoder function that uses XOR encryption with a salt.\n * \n * The cipher function transforms email addresses into hex-encoded strings\n * that are unreadable to automated scrapers but can be decoded when needed.\n * \n * @private\n * @param {string} salt - The salt to use for the encoder. Acts as an encryption key.\n * @returns {function} - A function that encrypts strings using the provided salt.\n */\nconst cipher = (salt) => {\n  /**\n   * Converts a text string into an array of character codes.\n   * @private\n   * @param {string} text - The input text to convert\n   * @returns {number[]} - Array of character codes\n   */\n  const str2chr = (text) => text.split('').map(c => c.charCodeAt(0));\n\n  /**\n   * Converts a number to a two-character hex string.\n   * @private\n   * @param {number} n - The number to convert to hex\n   * @returns {string} - Two-character hex representation\n   */\n  const byteHex = (n) => (\"0\" + Number(n).toString(16)).substr(-2);\n\n  /**\n   * Applies the XOR operation with the salt to a character code.\n   * @private\n   * @param {number} code - The character code to encrypt\n   * @returns {number} - The encrypted character code\n   */\n  const applySalt = (code) => str2chr(salt).reduce((a, b) => a ^ b, code);\n\n  // Return the encryption function\n  return (text) => text.split('')\n    .map(str2chr)\n    .map(applySalt)\n    .map(byteHex)\n    .join('');\n};\n\n/**\n * Creates a new decoder function that reverses the cipher encryption.\n * \n * The decipher function converts the hex-encoded strings back to the\n * original email addresses when needed.\n * \n * @private\n * @param {string} salt - The salt used for encoding. Must match the encoder salt.\n * @returns {function} - A function that decrypts strings using the provided salt.\n */\nconst decipher = (salt) => {\n  /**\n   * Converts a text string into an array of character codes.\n   * @private\n   * @param {string} rawVal - The input text to convert\n   * @returns {number[]} - Array of character codes\n   */\n  const str2chr = (rawVal) => rawVal.split('').map(c => c.charCodeAt(0));\n\n  /**\n   * Applies the XOR operation with the salt to a character code.\n   * @private\n   * @param {number} code - The character code to decrypt\n   * @returns {number} - The decrypted character code\n   */\n  const applySalt = (code) => str2chr(salt).reduce((a, b) => a ^ b, code);\n\n  // Return the decryption function\n  return (text) => String(text).match(/.{1,2}/g)\n    .map(hex => parseInt(hex, 16))\n    .map(applySalt)\n    .map(charCode => String.fromCharCode(charCode))\n    .join('');\n};\n\n/**\n * Default configuration options for Emend.\n * \n * @private\n * @constant\n * @type {Object}\n * @property {string} explicitPrefix - Prefix character used to mark explicit mailto links\n * @property {string} salt - Encryption key used for encoding/decoding\n * @property {boolean} explicitOnly - When true, only protects explicitly marked mailto links\n * @property {number} domRemoveDelay - Milliseconds to wait before removing the temporary link element\n * @property {number} sendClickDelay - Milliseconds to wait before triggering the click event\n */\nconst DEFAULT_OPTIONS = {\n  explicitPrefix: '@',\n  salt: '',\n  explicitOnly: false,\n  domRemoveDelay: 1200,\n  sendClickDelay: 500\n};\n\n/**\n * @class Emend\n * A lightweight JavaScript library for protecting mailto anchor links from web scrapers.\n * Emend works by encoding email addresses in mailto: links to prevent them from being\n * harvested by spam bots, while still making them usable for human visitors.\n */\nclass Emend {\n  /**\n   * @private\n   * @type {string} - The version number of the library\n   */\n  #version = '1.1.0';\n\n  /**\n   * @private\n   * @type {Object} - Configuration options\n   */\n  #options;\n\n  /**\n   * @private\n   * @type {Function} - The encryption function\n   */\n  #cipher;\n\n  /**\n   * @private\n   * @type {Function} - The decryption function\n   */\n  #decipher;\n\n  /**\n   * Creates a new Emend instance with the specified options.\n   * \n   * @constructor\n   * @param {Object} [options={}] - Initial configuration options\n   * @param {string} [options.explicitPrefix='@'] - Character used to mark explicit mailto links\n   * @param {string} [options.salt=''] - Encryption key used for encoding/decoding\n   * @param {boolean} [options.explicitOnly=false] - Only protect explicitly marked mailto links\n   * @param {number} [options.domRemoveDelay=1200] - Delay before removing temporary DOM elements\n   * @param {number} [options.sendClickDelay=500] - Delay before triggering click events\n   */\n  constructor(options = {}) {\n    this.#options = { ...DEFAULT_OPTIONS, ...options };\n  }\n\n  /**\n   * Initializes Emend by scanning the document for mailto links and protecting them.\n   * This method should be called after the DOM has loaded.\n   * \n   * @public\n   * @param {Object} [options={}] - Configuration options that override constructor options\n   * @param {string} [options.explicitPrefix] - Character used to mark explicit mailto links\n   * @param {string} [options.salt] - Encryption key used for encoding/decoding\n   * @param {boolean} [options.explicitOnly] - Only protect explicitly marked mailto links\n   * @param {number} [options.domRemoveDelay] - Delay before removing temporary DOM elements\n   * @param {number} [options.sendClickDelay] - Delay before triggering click events\n   * @returns {Emend} The Emend instance for chaining\n   * \n   * @example\n   * // Initialize with default options\n   * emend.init();\n   * \n   * @example\n   * // Initialize with custom options\n   * emend.init({\n   *   salt: 'YOUR_SECRET_KEY',\n   *   explicitPrefix: '#',\n   *   explicitOnly: true\n   * });\n   */\n  init(options = {}) {\n    this.#options = { ...this.#options, ...options };\n    this.#cipher = cipher(this.#options.salt);\n    this.#decipher = decipher(this.#options.salt);\n\n    const anchors = document.querySelectorAll('a');\n    anchors.forEach(anchor => {\n      const href = anchor.getAttribute('href');\n      if (!href || href.indexOf('mailto:') !== 0) return;\n\n      const explicitMailto = `mailto:${this.#options.explicitPrefix}`;\n\n      if (href.indexOf(explicitMailto) === 0) {\n        // Handle explicitly marked mailto links\n        anchor.setAttribute('data-emended-mailto', href.replace(explicitMailto, ''));\n        anchor.href = '#';\n      } else if (!this.#options.explicitOnly) {\n        // Handle normal mailto links when not in explicit only mode\n        this.protect(anchor);\n      }\n\n      anchor.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.sendMail(e.target);\n      });\n    });\n\n    return this;\n  }\n\n  /**\n   * Encrypts a string and returns the encrypted result.\n   * This is primarily used to encode email addresses.\n   * \n   * @public\n   * @param {string} valueToEncrypt - The string to encrypt (typically an email address)\n   * @returns {string} The encrypted string in hex format\n   * \n   * @example\n   * const encoded = emend.encode('user@example.com');\n   * // Returns something like: '7124312b362a282e6f65363a282e6429'\n   */\n  encode(valueToEncrypt) {\n    return this.#cipher(valueToEncrypt.replace('mailto:', ''));\n  }\n\n  /**\n   * Decrypts a previously encrypted string.\n   * \n   * @public\n   * @param {string} encodedValue - The encrypted string to decrypt\n   * @returns {string} The decrypted string (typically an email address)\n   * \n   * @example\n   * const decoded = emend.decode('7124312b362a282e6f65363a282e6429');\n   * // Returns: 'user@example.com'\n   */\n  decode(encodedValue) {\n    return this.#decipher(encodedValue);\n  }\n\n  /**\n   * Protects an anchor element by encoding its mailto link.\n   * \n   * @public\n   * @param {HTMLElement} element - The anchor element to protect\n   * @returns {HTMLElement} The protected anchor element (for chaining)\n   * \n   * @example\n   * // Manually protect a specific link\n   * const link = document.getElementById('email-link');\n   * emend.protect(link);\n   */\n  protect(element) {\n    const val = element.getAttribute('href').replace('mailto:', '');\n    element.setAttribute('data-emended-mailto', this.encode(val));\n    element.setAttribute('href', '#');\n    return element;\n  }\n\n  /**\n   * Decodes an emended anchor element and triggers a mailto link.\n   * Creates a hidden temporary anchor and simulates a click event\n   * to prevent browsers from blocking the mailto operation.\n   * \n   * @public\n   * @param {HTMLElement} element - The anchor element to decode\n   * \n   * @example\n   * // Manually trigger the mailto action for a protected link\n   * const link = document.getElementById('protected-email');\n   * emend.sendMail(link);\n   */\n  sendMail(element) {\n    if (!element.hasAttribute('data-emended-mailto')) return;\n\n    const mailto = `mailto:${this.decode(element.getAttribute('data-emended-mailto'))}`;\n\n    // Create a temporary dom element and simulate a click to launch the mailto link\n    const dom = document.createElement('a');\n    dom.style.visibility = 'hidden';\n    dom.style.position = 'absolute';\n    dom.href = mailto;\n    document.body.appendChild(dom);\n\n    setTimeout(() => dom.click(), this.#options.sendClickDelay);\n    setTimeout(() => document.body.removeChild(dom), this.#options.domRemoveDelay);\n  }\n\n  /**\n   * Gets the current version of the Emend library.\n   * \n   * @public\n   * @returns {string} The version number\n   * \n   * @example\n   * const version = emend.version;\n   * console.log(`Using Emend version ${version}`);\n   */\n  get version() {\n    return this.#version;\n  }\n}\n\n// Create a singleton instance\nconst emend = new Emend();\n\n// Export as module\nexport default emend;\nexport { Emend };\n"],
  "mappings": "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",
  "names": ["cipher", "salt", "str2chr", "text", "c", "byteHex", "n", "applySalt", "code", "a", "b", "decipher", "rawVal", "hex", "charCode", "DEFAULT_OPTIONS", "_version", "_options", "_cipher", "_decipher", "Emend", "options", "__privateAdd", "__privateSet", "__privateGet", "anchor", "href", "explicitMailto", "e", "valueToEncrypt", "encodedValue", "element", "val", "mailto", "dom", "emend", "emend_default"]
}
